PLE;INIT;scoring=accuracy,regularize_length=True,max_pipeline_length=None,random_state=None,max_total_time=180,max_eval_time=None,n_jobs=2,verbosity=20,keep_analysis_log=/Users/joa/notebooks/mlcourse/engineer/labs/trees.log,search_method=AsyncEA(),post_processing_method=BestFitPostProcessing();2020-04-01 12:08:30,355227;END!
PLE;PS;preprocessing;default;2020-04-01 12:08:54,327219;END!
PLE;PE;preprocessing;default;2020-04-01 12:08:55,142618;END!
PLE;PS;search;AsyncEA;2020-04-01 12:08:55,143906;END!
PLE;EVAL;2020-04-01 12:08:56,538879;3.9926459789276123;1.504878;(-inf, -3);2a0941c4-c753-49b3-b307-61e28344e205;LogisticRegression(Nystroem(PCA(data, PCA.iterated_power=6, PCA.svd_solver='randomized'), Nystroem.gamma=0.15000000000000002, Nystroem.kernel='poly', Nystroem.n_components=3), LogisticRegression.C=0.1, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:09:57,537087;END!
PLE;EVAL_ERR;2020-04-01 12:08:56,546637;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PCA(copy=True, iterated_power=6, n_components=None,...                 Nystroem(coef0=None, degree=None, gamma=0.15000000000000002,                          kernel='poly', kernel_params=None, n_components=3,                          random_state=None)),                ('0',                 LogisticRegression(C=0.1, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:09:00,533202;END!
PLE;EVAL_ERR;2020-04-01 12:09:02,257516;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 FeatureAgglomeration(affinity='l2', compute_full_t...                                      distance_threshold=None,                                      linkage='average', memory=None,                                      n_clusters=2,                                      pooling_func=<function mean at 0x10de6a840>)),                ('0',                 LogisticRegression(C=1.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:09:04,222494;END!
PLE;EVAL_TO;2020-04-01 12:09:05,914910;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PolynomialFeatures(degree=2, include_bias=False,                                    in...                                            learning_rate=1.0, loss='deviance',                                            max_depth=5, max_features=0.25,                                            max_leaf_nodes=None,                                            min_impurity_decrease=0.0,                                            min_impurity_split=None,                                            min_samples_leaf=17,                                            min_samples_split=13,                                            min_weight_fraction_leaf=0.0,                                            n_estimators=100,                                            n_iter_no_change=None,                                            presort='deprecated',                                            random_state=None, subsample=0.25,                                            tol=0.0001, validation_fraction=0.1,                                            verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:09:24,575123;END!
PLE;EVAL_TO;2020-04-01 12:08:58,271773;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', StandardScaler(copy=True, with_mean=True, with_std=...                                    interaction_only=False, order='C')),                ('0',                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,                                        criterion='gini', max_depth=1,                                        max_features=None, max_leaf_nodes=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=15,                                        min_samples_split=14,                                        min_weight_fraction_leaf=0.0,                                        presort='deprecated', random_state=None,                                        splitter='best'))],         verbose=False);2020-04-01 12:09:24,593215;END!
PLE;EVAL_ERR;2020-04-01 12:09:29,126533;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PCA(copy=True, iterated_power=10, n_components=None...                     whiten=False)),                ('1',                 PolynomialFeatures(degree=2, include_bias=False,                                    interaction_only=False, order='C')),                ('0',                 LogisticRegression(C=25.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:09:46,294569;END!
PLE;EVAL_ERR;2020-04-01 12:09:48,271251;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 Nystroem(coef0=None, degree=None, gamma=0.950000000...                                        class_weight=None, criterion='entropy',                                        max_depth=None,                                        max_features=0.35000000000000003,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=20,                                        min_samples_split=12,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);<class 'ValueError'>;X contains negative values.;2020-04-01 12:09:49,011470;END!
PLE;EVAL;2020-04-01 12:09:02,254941;1.9687981605529785;0.8500560000000001;(-inf, -2);3b802004-3a95-450a-b0df-c8e2ba09efac;LogisticRegression(FeatureAgglomeration(data, FeatureAgglomeration.affinity='l2', FeatureAgglomeration.linkage='average'), LogisticRegression.C=1.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:09:59,733550;END!
PLE;IND_MUT;a237151c-8a92-41fd-a256-2fa44e985f68;2a0941c4-c753-49b3-b307-61e28344e205;mut_insert;2020-04-01 12:09:59,757897;END!
PLE;EVAL;2020-04-01 12:09:05,911949;18.681057929992676;11.756872000000001;(-inf, -3);cdff8dcf-155b-4015-976c-1d7b818893fa;GradientBoostingClassifier(SelectFwe(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), SelectFwe.alpha=0.029, SelectFwe.score_func=f_regression), GradientBoostingClassifier.learning_rate=1.0, GradientBoostingClassifier.max_depth=5, GradientBoostingClassifier.max_features=0.25, GradientBoostingClassifier.min_samples_leaf=17, GradientBoostingClassifier.min_samples_split=13, GradientBoostingClassifier.n_estimators=100, GradientBoostingClassifier.subsample=0.25);2020-04-01 12:10:01,696859;END!
PLE;IND_MUT;dca27029-2e88-41ed-bbbc-783aef612bec;cdff8dcf-155b-4015-976c-1d7b818893fa;mut_shrink;2020-04-01 12:10:01,701329;END!
PLE;EVAL;2020-04-01 12:08:58,175784;26.488245964050293;16.19726;(-inf, -3);e5e64865-c4b0-496f-9d74-a5a10bc979f9;DecisionTreeClassifier(PolynomialFeatures(StandardScaler(data), PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), DecisionTreeClassifier.criterion='gini', DecisionTreeClassifier.max_depth=1, min_samples_leaf=15, min_samples_split=14);2020-04-01 12:10:03,347913;END!
PLE;IND_CX;baa026a7-c693-46bb-81ae-105e89929e75;e5e64865-c4b0-496f-9d74-a5a10bc979f9;2a0941c4-c753-49b3-b307-61e28344e205;2020-04-01 12:10:03,350861;END!
PLE;EVAL;2020-04-01 12:09:29,125184;17.172831058502197;2.8149440000000006;(-inf, -3);da14c38a-f48f-4c25-803b-d73690504d04;LogisticRegression(PolynomialFeatures(PCA(data, PCA.iterated_power=10, PCA.svd_solver='randomized'), PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), LogisticRegression.C=25.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:10:04,673809;END!
PLE;IND_CX;53ec96c5-f400-4dc3-b45d-6adbf4f07a9d;3b802004-3a95-450a-b0df-c8e2ba09efac;da14c38a-f48f-4c25-803b-d73690504d04;2020-04-01 12:10:04,675907;END!
PLE;EVAL;2020-04-01 12:09:48,268612;0.743710994720459;0.3583160000000021;(-inf, -3);ffca9147-a902-40e5-aacb-14606ee22dc4;RandomForestClassifier(FastICA(Nystroem(data, Nystroem.gamma=0.9500000000000001, Nystroem.kernel='chi2', Nystroem.n_components=1), FastICA.tol=0.5), RandomForestClassifier.bootstrap=False, RandomForestClassifier.criterion='entropy', RandomForestClassifier.max_features=0.35000000000000003, RandomForestClassifier.min_samples_leaf=20, RandomForestClassifier.min_samples_split=12, RandomForestClassifier.n_estimators=100);2020-04-01 12:10:06,053333;END!
PLE;IND_CX;11711ad1-b4ad-44c3-bc02-e193bad22613;2a0941c4-c753-49b3-b307-61e28344e205;3b802004-3a95-450a-b0df-c8e2ba09efac;2020-04-01 12:10:06,055426;END!
PLE;EVAL;2020-04-01 12:09:51,324599;7.5109241008758545;4.481016;(0.2488223784332198, -2);ca4a5fa9-f23d-4e31-8b56-5895108b197a;MultinomialNB(FeatureAgglomeration(data, FeatureAgglomeration.affinity='manhattan', FeatureAgglomeration.linkage='average'), alpha=100.0, fit_prior=False);2020-04-01 12:10:06,820114;END!
PLE;IND_MUT;7ed780d7-cae8-4c12-9be5-dd317efeeffd;3b802004-3a95-450a-b0df-c8e2ba09efac;mut_replace_terminal;2020-04-01 12:10:06,823760;END!
PLE;EVAL;2020-04-01 12:10:00,619625;2.322582960128784;1.8733140000000006;(0.023697369374592363, -2);f9af4546-5063-42a5-b198-d03d4ff0eeca;MultinomialNB(Nystroem(data, Nystroem.gamma=0.45, Nystroem.kernel='laplacian', Nystroem.n_components=1), alpha=1.0, fit_prior=False);2020-04-01 12:10:09,400277;END!
PLE;EVAL_ERR;2020-04-01 12:10:04,225473;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 FastICA(algorithm='parallel', fun='logcosh', fun_ar...                         max_iter=200, n_components=None, random_state=None,                         tol=0.15000000000000002, w_init=None, whiten=True)),                ('1', MaxAbsScaler(copy=True)),                ('0',                 LogisticRegression(C=25.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:10:08,675692;END!
PLE;IND_MUT;ad75e2bd-a5dd-415b-bd79-fa93516dfafb;ca4a5fa9-f23d-4e31-8b56-5895108b197a;mut_replace_primitive;2020-04-01 12:10:09,403716;END!
PLE;EVAL;2020-04-01 12:10:04,224683;4.466454982757568;3.0918680000000016;(-inf, -3);20feb1ad-8a58-46a9-891f-117ff22190a1;LogisticRegression(MaxAbsScaler(FastICA(data, FastICA.tol=0.15000000000000002)), LogisticRegression.C=25.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:10:12,295201;END!
PLE;IND_MUT;598cfef0-9c77-4a85-8135-4efd062b2b80;3b802004-3a95-450a-b0df-c8e2ba09efac;mut_shrink;2020-04-01 12:10:12,298050;END!
PLE;EVAL;2020-04-01 12:09:28,905673;52.484203815460205;32.563897999999995;(-inf, -2);cc7dd18b-920b-4a31-83cc-789d2a6216c1;KNeighborsClassifier(StandardScaler(data), KNeighborsClassifier.n_neighbors=20, KNeighborsClassifier.p=2, KNeighborsClassifier.weights='distance');2020-04-01 12:10:22,526538;END!
PLE;EVAL_TO;2020-04-01 12:09:28,907930;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1', StandardScaler(copy=True, with_mean=True, with_std=True)),                ('0',                 KNeighborsClassifier(algorithm='auto', leaf_size=30,                                      metric='minkowski', metric_params=None,                                      n_jobs=None, n_neighbors=20, p=2,                                      weights='distance'))],         verbose=False);2020-04-01 12:10:21,372069;END!
PLE;IND_MUT;7e9788df-15e6-41ec-88a6-45a5a649460f;2a0941c4-c753-49b3-b307-61e28344e205;mut_replace_terminal;2020-04-01 12:10:22,530073;END!
PLE;EVAL;2020-04-01 12:10:11,913889;18.357173919677734;15.414496;(-inf, -1);f308729e-9f8d-4270-ab4b-dc29fb465a30;RandomForestClassifier(data, RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='entropy', RandomForestClassifier.max_features=0.3, RandomForestClassifier.min_samples_leaf=6, RandomForestClassifier.min_samples_split=2, RandomForestClassifier.n_estimators=100);2020-04-01 12:10:36,207159;END!
PLE;EVAL_TO;2020-04-01 12:10:11,915314;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='entropy',                                        max_depth=None, max_features=0.3,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=6, min_samples_split=2,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:10:30,255541;END!
PLE;IND_MUT;029cc937-82d8-4110-936e-80fee64e68d1;ca4a5fa9-f23d-4e31-8b56-5895108b197a;mut_replace_terminal;2020-04-01 12:10:36,296511;END!
PLE;EVAL;2020-04-01 12:10:22,966850;18.613691091537476;8.880809999999997;(-inf, -1);57751d96-b01a-4b21-8008-9f511849e204;RandomForestClassifier(data, RandomForestClassifier.bootstrap=False, RandomForestClassifier.criterion='entropy', RandomForestClassifier.max_features=0.55, RandomForestClassifier.min_samples_leaf=10, RandomForestClassifier.min_samples_split=5, RandomForestClassifier.n_estimators=100);2020-04-01 12:10:43,456773;END!
PLE;EVAL_TO;2020-04-01 12:10:22,969166;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,                                        class_weight=None, criterion='entropy',                                        max_depth=None, max_features=0.55,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=10,                                        min_samples_split=5,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:10:41,566656;END!
PLE;IND_MUT;83760eef-90b0-42dc-9d55-6d5d64f5d472;cdff8dcf-155b-4015-976c-1d7b818893fa;mut_replace_terminal;2020-04-01 12:10:43,461017;END!
PLE;EVAL;2020-04-01 12:10:44,052843;1.6305580139160156;1.1384079999999983;(-inf, -2);2c4bd715-f4dc-4512-a8d1-4bf2423b4b65;LinearSVC(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), LinearSVC.C=0.0001, LinearSVC.dual=True, LinearSVC.loss='squared_hinge', LinearSVC.penalty='l1', LinearSVC.tol=0.1);2020-04-01 12:10:48,594324;END!
PLE;EVAL_ERR;2020-04-01 12:10:44,054184;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 PolynomialFeatures(degree=2, include_bias=False,                                    interaction_only=False, order='C')),                ('0',                 LinearSVC(C=0.0001, class_weight=None, dual=True,                           fit_intercept=True, intercept_scaling=1,                           loss='squared_hinge', max_iter=1000,                           multi_class='ovr', penalty='l1', random_state=None,                           tol=0.1, verbose=0))],         verbose=False);<class 'ValueError'>;Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True;2020-04-01 12:10:45,666532;END!
PLE;IND_MUT;2943fbb0-bcf0-4a65-9d4f-969d2de18425;57751d96-b01a-4b21-8008-9f511849e204;mut_insert;2020-04-01 12:10:48,597498;END!
PLE;EVAL;2020-04-01 12:10:39,159475;14.654601812362671;10.037367999999994;(0.5697876657728821, -3);05de5ecd-9469-4b1f-ad75-32fa37f37a77;BernoulliNB(PCA(Normalizer(data, Normalizer.norm='max'), PCA.iterated_power=10, PCA.svd_solver='randomized'), alpha=1.0, fit_prior=True);2020-04-01 12:10:56,361322;END!
PLE;IND_MUT;640fa264-6fee-453e-9660-da380feb56a3;f308729e-9f8d-4270-ab4b-dc29fb465a30;mut_replace_primitive;2020-04-01 12:10:56,363892;END!
PLE;EVAL;2020-04-01 12:10:48,125409;18.060903072357178;12.472413999999993;(-inf, -3);e62ee180-8848-4545-a4ec-9f5332674d94;ExtraTreesClassifier(VarianceThreshold(FeatureAgglomeration(data, FeatureAgglomeration.affinity='precomputed', FeatureAgglomeration.linkage='average'), VarianceThreshold.threshold=0.5), ExtraTreesClassifier.bootstrap=False, ExtraTreesClassifier.criterion='gini', ExtraTreesClassifier.max_features=0.05, min_samples_leaf=12, min_samples_split=18, ExtraTreesClassifier.n_estimators=100);2020-04-01 12:11:07,786826;END!
PLE;EVAL_TO;2020-04-01 12:10:48,127254;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 FeatureAgglomeration(affinity='precomputed',                                      compu...                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,                                      class_weight=None, criterion='gini',                                      max_depth=None, max_features=0.05,                                      max_leaf_nodes=None, max_samples=None,                                      min_impurity_decrease=0.0,                                      min_impurity_split=None,                                      min_samples_leaf=12, min_samples_split=18,                                      min_weight_fraction_leaf=0.0,                                      n_estimators=100, n_jobs=None,                                      oob_score=False, random_state=None,                                      verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:11:06,166558;END!
PLE;IND_MUT;2d47f015-4e63-4c60-a7aa-50b6d498cf07;ca4a5fa9-f23d-4e31-8b56-5895108b197a;mut_replace_terminal;2020-04-01 12:11:07,792006;END!
PLE;EVAL;2020-04-01 12:11:07,625932;0.8311469554901123;0.3722020000000015;(-inf, -2);ef6086cd-f83c-4684-81f9-c397a88c4b6c;LogisticRegression(MaxAbsScaler(data), LogisticRegression.C=0.0001, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:11:10,386318;END!
PLE;EVAL_ERR;2020-04-01 12:11:07,626667;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1', MaxAbsScaler(copy=True)),                ('0',                 LogisticRegression(C=0.0001, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:11:08,443247;END!
PLE;IND_MUT;074a514d-0dce-4427-97bf-5fb81ddec2a1;f9af4546-5063-42a5-b198-d03d4ff0eeca;mut_insert;2020-04-01 12:11:10,390608;END!
PLE;EVAL;2020-04-01 12:10:55,605156;18.051074028015137;14.706773999999996;(-inf, -2);b502e0e3-61df-4613-a153-6094f97e7db7;LogisticRegression(RBFSampler(data, RBFSampler.gamma=0.15000000000000002), LogisticRegression.C=25.0, LogisticRegression.dual=False, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:11:14,834628;END!
PLE;EVAL_TO;2020-04-01 12:10:55,605773;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 RBFSampler(gamma=0.15000000000000002, n_components=100,                            random_state=None)),                ('0',                 LogisticRegression(C=25.0, class_weight=None, dual=False,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);2020-04-01 12:11:13,634055;END!
PLE;IND_MUT;24d0d546-2537-4d21-9d49-c069baf7e9b9;ca4a5fa9-f23d-4e31-8b56-5895108b197a;mut_insert;2020-04-01 12:11:14,840687;END!
PLE;EVAL;2020-04-01 12:11:14,906705;1.3271689414978027;0.9665820000000025;(-inf, -2);d672c0c8-d351-4e93-ae60-173447370c07;MultinomialNB(PCA(data, PCA.iterated_power=2, PCA.svd_solver='randomized'), alpha=0.001, fit_prior=True);2020-04-01 12:11:17,899317;END!
PLE;EVAL_ERR;2020-04-01 12:11:14,908859;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 PCA(copy=True, iterated_power=2, n_components=None,                     random_state=None, svd_solver='randomized', tol=0.0,                     whiten=False)),                ('0',                 MultinomialNB(alpha=0.001, class_prior=None, fit_prior=True))],         verbose=False);<class 'ValueError'>;Negative values in data passed to MultinomialNB (input X);2020-04-01 12:11:16,233675;END!
PLE;IND_MUT;55b55d43-31f8-4ccb-aeed-17dea5abf467;f308729e-9f8d-4270-ab4b-dc29fb465a30;mut_replace_terminal;2020-04-01 12:11:17,905883;END!
PLE;EVAL;2020-04-01 12:11:17,464690;3.125565767288208;2.1806820000000045;(0.10084064062613232, -2);6dacaf7a-28f5-4f66-a72d-5b017950c880;GaussianNB(StandardScaler(data));2020-04-01 12:11:22,332705;END!
PLE;IND_MUT;6dbc22ab-bf4a-44d7-8bc0-66f1f0efa275;05de5ecd-9469-4b1f-ad75-32fa37f37a77;mut_replace_terminal;2020-04-01 12:11:22,337514;END!
PLE;EVAL;2020-04-01 12:11:22,160782;2.194460868835449;2.3527700000000067;(0.42459598521632, -3);3d2f9f0c-165f-4d07-8768-f4e6af4d4a5f;BernoulliNB(RobustScaler(SelectFwe(data, SelectFwe.alpha=0.006, SelectFwe.score_func=f_regression)), alpha=0.1, fit_prior=False);2020-04-01 12:11:25,416763;END!
PLE;IND_MUT;d05ce58e-f3ed-4b02-a224-f262363918d1;6dacaf7a-28f5-4f66-a72d-5b017950c880;mut_insert;2020-04-01 12:11:25,457758;END!
PLE;EVAL;2020-04-01 12:11:25,529966;2.2921040058135986;1.1558040000000034;(-inf, -2);dc8dda5a-bc8e-4373-adbf-5b06b39892b9;MultinomialNB(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), alpha=10.0, fit_prior=True);2020-04-01 12:11:28,826242;END!
PLE;EVAL_ERR;2020-04-01 12:11:25,531596;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 PolynomialFeatures(degree=2, include_bias=False,                                    interaction_only=False, order='C')),                ('0',                 MultinomialNB(alpha=10.0, class_prior=None, fit_prior=True))],         verbose=False);<class 'ValueError'>;Negative values in data passed to MultinomialNB (input X);2020-04-01 12:11:27,820042;END!
PLE;IND_MUT;6a8e3a09-b8d9-4bab-9c49-8dbfd90787c9;ffca9147-a902-40e5-aacb-14606ee22dc4;mut_replace_primitive;2020-04-01 12:11:28,839512;END!
PLE;EVAL;2020-04-01 12:11:10,153864;21.1963951587677;18.750590000000003;(-inf, -1);6a60ea8c-286c-4cdf-b92b-2264535da688;KNeighborsClassifier(data, KNeighborsClassifier.n_neighbors=50, KNeighborsClassifier.p=1, KNeighborsClassifier.weights='distance');2020-04-01 12:11:33,841561;END!
PLE;EVAL_TO;2020-04-01 12:11:10,154570;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 KNeighborsClassifier(algorithm='auto', leaf_size=30,                                      metric='minkowski', metric_params=None,                                      n_jobs=None, n_neighbors=50, p=1,                                      weights='distance'))],         verbose=False);2020-04-01 12:11:31,324386;END!
PLE;IND_MUT;b85794f7-ad82-4b42-b465-446a46de616a;ca4a5fa9-f23d-4e31-8b56-5895108b197a;mut_insert;2020-04-01 12:11:33,846252;END!
PLE;EVAL;2020-04-01 12:11:29,265605;2.0001180171966553;1.959384;(0.3025581563881441, -1);b510c52b-417c-4399-8804-b5ddee8b807f;BernoulliNB(data, alpha=0.1, fit_prior=False);2020-04-01 12:11:35,898442;END!
PLE;EVAL_ERR;2020-04-01 12:11:33,812610;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 LogisticRegression(C=25.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:11:34,155154;END!
PLE;IND_MUT;8a81a421-1285-47ca-99ff-e133abd701e6;b502e0e3-61df-4613-a153-6094f97e7db7;mut_insert;2020-04-01 12:11:35,906903;END!
PLE;PE;search;AsyncEA;2020-04-01 12:11:37,198854;END!
PLE;PS;postprocess;BestFitPostProcessing;2020-04-01 12:11:37,215163;END!
PLE;PE;postprocess;BestFitPostProcessing;2020-04-01 12:11:39,327797;END!
PLE;PS;preprocessing;default;2020-04-01 12:12:43,963659;END!
PLE;PE;preprocessing;default;2020-04-01 12:12:45,117524;END!
PLE;PS;search;AsyncEA;2020-04-01 12:12:45,118670;END!
PLE;PE;search;AsyncEA;2020-04-01 12:12:57,240965;END!
PLE;PS;postprocess;BestFitPostProcessing;2020-04-01 12:12:57,245023;END!
PLE;PS;preprocessing;default;2020-04-01 12:13:09,237274;END!
PLE;PE;preprocessing;default;2020-04-01 12:13:10,180375;END!
PLE;PS;search;AsyncEA;2020-04-01 12:13:10,183570;END!
PLE;INIT;scoring=accuracy,regularize_length=True,max_pipeline_length=None,random_state=None,max_total_time=180,max_eval_time=None,n_jobs=2,verbosity=20,keep_analysis_log=/Users/joa/notebooks/mlcourse/engineer/labs/trees.log,search_method=AsyncEA(),post_processing_method=BestFitPostProcessing();2020-04-01 12:13:17,366945;END!
PLE;PS;preprocessing;default;2020-04-01 12:13:19,479225;END!
PLE;PE;preprocessing;default;2020-04-01 12:13:20,917672;END!
PLE;PS;search;AsyncEA;2020-04-01 12:13:20,918914;END!
PLE;EVAL;2020-04-01 12:13:22,715682;0.6032090187072754;0.393872;(-inf, -3);9b3bd84c-7417-4b60-8d4b-8078181a4d18;ExtraTreesClassifier(VarianceThreshold(Normalizer(data, Normalizer.norm='max'), VarianceThreshold.threshold=0.3), ExtraTreesClassifier.bootstrap=False, ExtraTreesClassifier.criterion='gini', ExtraTreesClassifier.max_features=0.8500000000000001, min_samples_leaf=1, min_samples_split=2, ExtraTreesClassifier.n_estimators=100);2020-04-01 12:13:59,378726;END!
PLE;EVAL_ERR;2020-04-01 12:13:22,718527;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', Normalizer(copy=True, norm='max')),                ('1', VarianceTh...                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,                                      class_weight=None, criterion='gini',                                      max_depth=None,                                      max_features=0.8500000000000001,                                      max_leaf_nodes=None, max_samples=None,                                      min_impurity_decrease=0.0,                                      min_impurity_split=None,                                      min_samples_leaf=1, min_samples_split=2,                                      min_weight_fraction_leaf=0.0,                                      n_estimators=100, n_jobs=None,                                      oob_score=False, random_state=None,                                      verbose=0, warm_start=False))],         verbose=False);<class 'ValueError'>;No feature in X meets the variance threshold 0.30000;2020-04-01 12:13:23,318272;END!
PLE;EVAL_ERR;2020-04-01 12:13:31,233174;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 LogisticRegression(C=20.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:13:31,579902;END!
PLE;EVAL_TO;2020-04-01 12:13:29,316418;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 FeatureAgglomeration(affinity='cosine',                                      compute_fu...                                      distance_threshold=None,                                      linkage='complete', memory=None,                                      n_clusters=2,                                      pooling_func=<function mean at 0x10de6a840>)),                ('0',                 LogisticRegression(C=20.0, class_weight=None, dual=False,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);2020-04-01 12:13:47,338586;END!
PLE;EVAL;2020-04-01 12:13:22,212638;2.8194961547851562;2.01457;(0.4789115153271976, -1);1360f0c7-0157-4fb0-a1e8-77ba71fadf33;GaussianNB(data);2020-04-01 12:14:01,075762;END!
PLE;IND_MUT;737515d8-3f58-4e64-b3dd-dc5a0d4c3c61;1360f0c7-0157-4fb0-a1e8-77ba71fadf33;mut_insert;2020-04-01 12:14:01,077835;END!
PLE;EVAL;2020-04-01 12:13:24,716060;2.894232988357544;2.0881220000000003;(0.11218204217696935, -2);a66eb10f-a332-4109-85f6-4ffb3bc8f8ab;GaussianNB(MinMaxScaler(data));2020-04-01 12:14:03,345999;END!
PLE;IND_MUT;b5f64aa7-0566-42aa-9b36-eaf34ba05054;a66eb10f-a332-4109-85f6-4ffb3bc8f8ab;mut_replace_primitive;2020-04-01 12:14:03,348497;END!
PLE;EVAL;2020-04-01 12:13:27,435036;2.7014241218566895;1.8931479999999996;(0.4789115153271976, -1);87b4454e-76ba-46be-87c8-192dded614b3;GaussianNB(data);2020-04-01 12:14:05,544132;END!
PLE;EVAL_TO;2020-04-01 12:13:33,762174;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 FastICA(algorithm='parallel', fun='logcosh', fun_args=None,                         max_iter=200, n_components=None, random_state=None,                         tol=1.0, w_init=None, whiten=True)),                ('1', MaxAbsScaler(copy=True)),                ('0',                 KNeighborsClassifier(algorithm='auto', leaf_size=30,                                      metric='minkowski', metric_params=None,                                      n_jobs=None, n_neighbors=50, p=2,                                      weights='uniform'))],         verbose=False);2020-04-01 12:14:04,358143;END!
PLE;IND_MUT;4239dc7b-366e-4806-99fa-9ea928163a8b;87b4454e-76ba-46be-87c8-192dded614b3;mut_replace_primitive;2020-04-01 12:14:05,547299;END!
PLE;EVAL;2020-04-01 12:13:31,230093;0.3489198684692383;0.3299599999999998;(-inf, -1);dfa02348-3568-4452-b697-2a6870cbf008;LogisticRegression(data, LogisticRegression.C=20.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:14:08,508216;END!
PLE;IND_MUT;292d4910-b9a0-4565-89c5-2f7ec9ef3b1d;87b4454e-76ba-46be-87c8-192dded614b3;mut_insert;2020-04-01 12:14:08,509767;END!
PLE;EVAL;2020-04-01 12:13:29,306646;18.032957315444946;16.185096;(-inf, -2);2a8710ad-1f9a-436f-be55-81472b29066f;LogisticRegression(FeatureAgglomeration(data, FeatureAgglomeration.affinity='cosine', FeatureAgglomeration.linkage='complete'), LogisticRegression.C=20.0, LogisticRegression.dual=False, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:14:10,446756;END!
PLE;IND_MUT;fe789581-ab49-4738-be75-d4bfc96ed407;a66eb10f-a332-4109-85f6-4ffb3bc8f8ab;mut_replace_primitive;2020-04-01 12:14:10,457281;END!
PLE;EVAL;2020-04-01 12:13:48,517516;5.504176139831543;3.514336;(0.4636567867236756, -2);e128dc15-ae7e-408b-bb16-38f2044ac8b7;BernoulliNB(RBFSampler(data, RBFSampler.gamma=0.2), alpha=1.0, fit_prior=True);2020-04-01 12:14:12,534570;END!
PLE;IND_MUT;e71c5502-a548-4825-9ba4-ded4c7302e25;e128dc15-ae7e-408b-bb16-38f2044ac8b7;mut_replace_terminal;2020-04-01 12:14:12,536443;END!
PLE;EVAL;2020-04-01 12:13:33,759844;30.610382795333862;25.022188;(-inf, -3);891ca19a-6266-4541-90dd-ce7fe45ed629;KNeighborsClassifier(MaxAbsScaler(FastICA(data, FastICA.tol=1.0)), KNeighborsClassifier.n_neighbors=50, KNeighborsClassifier.p=2, KNeighborsClassifier.weights='uniform');2020-04-01 12:14:14,652922;END!
PLE;EVAL_TO;2020-04-01 12:13:56,102186;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 RBFSampler(gamma=1.0, n_components=100, random_state=None)),                ('1',                 PCA(copy=True, iterated_power=5, n_components=None,                     random_state=None, svd_solver='randomized', tol=0.0,                     whiten=False)),                ('0',                 BernoulliNB(alpha=1.0, binarize=0.0, class_prior=None,                             fit_prior=True))],         verbose=False);2020-04-01 12:14:14,139587;END!
PLE;IND_MUT;6ce99a84-7862-4a29-acb6-82025024faa4;87b4454e-76ba-46be-87c8-192dded614b3;mut_replace_primitive;2020-04-01 12:14:14,656269;END!
PLE;EVAL;2020-04-01 12:13:56,099694;18.045411825180054;10.856663999999999;(-inf, -3);228a0fd8-b59c-4670-b395-0951d88bbbef;BernoulliNB(PCA(RBFSampler(data, RBFSampler.gamma=1.0), PCA.iterated_power=5, PCA.svd_solver='randomized'), alpha=1.0, fit_prior=True);2020-04-01 12:14:16,178938;END!
PLE;IND_MUT;6f189425-2f56-42bf-8784-a0e8bcc05b51;dfa02348-3568-4452-b697-2a6870cbf008;mut_insert;2020-04-01 12:14:16,181284;END!
PLE;EVAL;2020-04-01 12:14:07,471360;18.119135856628418;12.726134000000002;(-inf, -3);25b1cb70-49f3-4278-b782-a25460453337;RandomForestClassifier(Nystroem(MaxAbsScaler(data), Nystroem.gamma=0.1, Nystroem.kernel='poly', Nystroem.n_components=2), RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.1, RandomForestClassifier.min_samples_leaf=13, RandomForestClassifier.min_samples_split=15, RandomForestClassifier.n_estimators=100);2020-04-01 12:14:26,459549;END!
PLE;EVAL_TO;2020-04-01 12:14:07,472590;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', MaxAbsScaler(copy=True)),                ('1',                 Nystroem(coef0=None...                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None, max_features=0.1,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=13,                                        min_samples_split=15,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:14:25,576651;END!
PLE;IND_MUT;d1e51b04-14b3-4ce3-a809-51fba2481b6a;1360f0c7-0157-4fb0-a1e8-77ba71fadf33;mut_replace_primitive;2020-04-01 12:14:26,465109;END!
PLE;EVAL;2020-04-01 12:14:26,686966;18.18251395225525;18.127504000000002;(-inf, -2);fc9d7b78-4164-476b-b4c0-c8272e7a328d;RandomForestClassifier(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='entropy', RandomForestClassifier.max_features=0.05, RandomForestClassifier.min_samples_leaf=19, RandomForestClassifier.min_samples_split=11, RandomForestClassifier.n_estimators=100);2020-04-01 12:14:46,136783;END!
PLE;EVAL_TO;2020-04-01 12:14:26,688627;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 PolynomialFeatures(degree=2, include_bias=False,                                    in...                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='entropy',                                        max_depth=None, max_features=0.05,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=19,                                        min_samples_split=11,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:14:44,842605;END!
PLE;IND_MUT;0cb1e46c-7514-4c76-a391-b91ebee9e1fd;87b4454e-76ba-46be-87c8-192dded614b3;mut_insert;2020-04-01 12:14:46,142070;END!
PLE;EVAL;2020-04-01 12:14:46,218300;0.38607001304626465;0.34006399999999815;(-inf, -3);6a592271-6915-40b1-8e09-15fc1407d26e;GaussianNB(SelectFwe(Nystroem(data, Nystroem.gamma=1.0, Nystroem.kernel='additive_chi2', Nystroem.n_components=2), SelectFwe.alpha=0.045, SelectFwe.score_func=f_regression));2020-04-01 12:14:47,537660;END!
PLE;EVAL_ERR;2020-04-01 12:14:46,220403;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 Nystroem(coef0=None, degree=None, gamma=1.0,                          kernel='additive_chi2', kernel_params=None,                          n_components=2, random_state=None)),                ('1',                 SelectFwe(alpha=0.045,                           score_func=<function f_regression at 0x11a6f0c80>)),                ('0', GaussianNB(priors=None, var_smoothing=1e-09))],         verbose=False);<class 'ValueError'>;X contains negative values.;2020-04-01 12:14:46,604540;END!
PLE;IND_MUT;c9a93916-8264-4576-8df0-1bb200c26b56;6a592271-6915-40b1-8e09-15fc1407d26e;mut_replace_primitive;2020-04-01 12:14:47,539188;END!
PLE;EVAL;2020-04-01 12:14:47,964492;16.833321809768677;16.194779999999994;(0.4547068628161461, -3);b085e676-135a-4045-8a16-6372dae4cce8;LinearSVC(SelectPercentile(Normalizer(data, Normalizer.norm='max'), SelectPercentile.percentile=70, SelectPercentile.score_func=f_classif), LinearSVC.C=10.0, LinearSVC.dual=False, LinearSVC.loss='squared_hinge', LinearSVC.penalty='l2', LinearSVC.tol=1e-05);2020-04-01 12:15:06,063850;END!
PLE;IND_MUT;954b852d-c887-4832-8cc0-11c872277866;dfa02348-3568-4452-b697-2a6870cbf008;mut_replace_primitive;2020-04-01 12:15:06,067787;END!
PLE;EVAL;2020-04-01 12:15:06,264410;3.9491782188415527;3.819972000000007;(0.46814986593231395, -2);fa655db7-44ab-41b5-9ba6-436ce7c318da;DecisionTreeClassifier(FeatureAgglomeration(data, FeatureAgglomeration.affinity='l1', FeatureAgglomeration.linkage='complete'), DecisionTreeClassifier.criterion='entropy', DecisionTreeClassifier.max_depth=1, min_samples_leaf=15, min_samples_split=8);2020-04-01 12:15:11,070121;END!
PLE;IND_MUT;98d6a089-ccfa-40d4-8dfb-101da72bebda;fa655db7-44ab-41b5-9ba6-436ce7c318da;mut_shrink;2020-04-01 12:15:11,072322;END!
PLE;EVAL;2020-04-01 12:15:10,926198;1.9971277713775635;2.076594;(0.5201826219291253, -2);73b7786a-d111-4c15-bdcd-6e7d68740662;BernoulliNB(Normalizer(data, Normalizer.norm='l1'), alpha=0.01, fit_prior=True);2020-04-01 12:15:15,370174;END!
PLE;IND_MUT;84302c0c-ea5b-49a0-a53a-ba4f4f5e71ad;73b7786a-d111-4c15-bdcd-6e7d68740662;mut_insert;2020-04-01 12:15:15,393263;END!
PLE;EVAL;2020-04-01 12:15:14,420628;4.562183856964111;3.568405999999996;(0.46383795927241106, -3);b7f487b0-cc63-4f5e-9947-a44b958581cd;GaussianNB(RBFSampler(SelectPercentile(data, SelectPercentile.percentile=76, SelectPercentile.score_func=f_regression), RBFSampler.gamma=0.05));2020-04-01 12:15:20,916505;END!
PLE;IND_MUT;0d7733c7-20c1-4033-b59c-b2fe7590aade;2a8710ad-1f9a-436f-be55-81472b29066f;mut_insert;2020-04-01 12:15:20,920006;END!
PLE;EVAL;2020-04-01 12:15:20,617344;1.8960578441619873;1.8961960000000033;(0.30259439089789114, -1);6ce77a6c-9093-4a65-94f5-47614ffbe73d;BernoulliNB(data, alpha=0.001, fit_prior=False);2020-04-01 12:15:23,293797;END!
PLE;IND_MUT;549c6dbc-3069-47e4-b304-2e44c0c2a201;dfa02348-3568-4452-b697-2a6870cbf008;mut_replace_terminal;2020-04-01 12:15:23,295356;END!
PLE;EVAL;2020-04-01 12:15:23,904697;10.358772039413452;8.541194000000004;(0.5349300673961881, -3);2b7ee2e6-7666-4302-9355-ccd72e4572ab;DecisionTreeClassifier(Nystroem(Nystroem(data, Nystroem.gamma=0.9500000000000001, Nystroem.kernel='cosine', Nystroem.n_components=10), Nystroem.gamma=0.30000000000000004, Nystroem.kernel='rbf', Nystroem.n_components=9), DecisionTreeClassifier.criterion='entropy', DecisionTreeClassifier.max_depth=10, min_samples_leaf=18, min_samples_split=17);2020-04-01 12:15:35,296601;END!
PLE;IND_CX;729b9e22-0201-4b09-b64f-ae2b35b5e860;2a8710ad-1f9a-436f-be55-81472b29066f;dfa02348-3568-4452-b697-2a6870cbf008;2020-04-01 12:15:35,299514;END!
PLE;EVAL;2020-04-01 12:15:35,104671;18.191066026687622;16.080302000000003;(-inf, -2);04486dbd-5599-414d-a50d-0380262fb6b0;RandomForestClassifier(VarianceThreshold(data, VarianceThreshold.threshold=0.9000000000000001), RandomForestClassifier.bootstrap=False, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.8, RandomForestClassifier.min_samples_leaf=19, RandomForestClassifier.min_samples_split=12, RandomForestClassifier.n_estimators=100);2020-04-01 12:15:54,599317;END!
PLE;EVAL_TO;2020-04-01 12:15:35,105285;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1', VarianceThreshold(threshold=0.9000000000000001)),...                 RandomForestClassifier(bootstrap=False, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None, max_features=0.8,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=19,                                        min_samples_split=12,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:15:53,288174;END!
PLE;IND_MUT;5cacf3ef-146c-4f65-b252-3440c93061f5;fa655db7-44ab-41b5-9ba6-436ce7c318da;mut_replace_terminal;2020-04-01 12:15:54,602309;END!
PLE;PE;search;AsyncEA;2020-04-01 12:16:00,958777;END!
PLE;PS;postprocess;BestFitPostProcessing;2020-04-01 12:16:00,963152;END!
PLE;PE;postprocess;BestFitPostProcessing;2020-04-01 12:16:02,771114;END!
