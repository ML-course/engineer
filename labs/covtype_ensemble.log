PLE;INIT;scoring=accuracy,regularize_length=True,max_pipeline_length=None,random_state=None,max_total_time=180,max_eval_time=None,n_jobs=2,verbosity=20,keep_analysis_log=/Users/joa/notebooks/mlcourse/engineer/labs/covtype_ensemble.log,search_method=AsyncEA(),post_processing_method=EnsemblePostProcessing(ensemble_size=25,hillclimb_size=10000,max_models=200);2020-04-01 12:17:34,917950;END!
PLE;PS;preprocessing;default;2020-04-01 12:18:06,396594;END!
PLE;PE;preprocessing;default;2020-04-01 12:18:07,480010;END!
PLE;PS;search;AsyncEA;2020-04-01 12:18:07,480932;END!
PLE;EVAL;2020-04-01 12:18:09,333076;0.8093650341033936;0.366976;(-inf, -1);cc4b55f7-b095-4391-a071-69d852419d78;LinearSVC(data, LinearSVC.C=0.0001, LinearSVC.dual=True, LinearSVC.loss='squared_hinge', LinearSVC.penalty='l1', LinearSVC.tol=0.01);2020-04-01 12:18:58,142159;END!
PLE;EVAL_ERR;2020-04-01 12:18:09,341715;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 LinearSVC(C=0.0001, class_weight=None, dual=True,                           fit_intercept=True, intercept_scaling=1,                           loss='squared_hinge', max_iter=1000,                           multi_class='ovr', penalty='l1', random_state=None,                           tol=0.01, verbose=0))],         verbose=False);<class 'ValueError'>;Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True;2020-04-01 12:18:10,139782;END!
PLE;EVAL_ERR;2020-04-01 12:18:22,204792;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 LinearSVC(C=1.0, class_weight=None, dual=True,                           fit_intercept=True, intercept_scaling=1,                           loss='hinge', max_iter=1000, multi_class='ovr',                           penalty='l1', random_state=None, tol=0.1,                           verbose=0))],         verbose=False);<class 'ValueError'>;Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True;2020-04-01 12:18:22,578344;END!
PLE;EVAL_TO;2020-04-01 12:18:11,582428;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 RBFSampler(gamma=0.1, n_components=100, random_stat...                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,                                      class_weight=None, criterion='entropy',                                      max_depth=None,                                      max_features=0.9500000000000001,                                      max_leaf_nodes=None, max_samples=None,                                      min_impurity_decrease=0.0,                                      min_impurity_split=None,                                      min_samples_leaf=11, min_samples_split=4,                                      min_weight_fraction_leaf=0.0,                                      n_estimators=100, n_jobs=None,                                      oob_score=False, random_state=None,                                      verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:18:30,285472;END!
PLE;EVAL_TO;2020-04-01 12:18:25,026645;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 SelectPercentile(percentile=91,                                  score_func=<function f_regression at 0x11a6f0c80>)),                ('0',                 KNeighborsClassifier(algorithm='auto', leaf_size=30,                                      metric='minkowski', metric_params=None,                                      n_jobs=None, n_neighbors=46, p=2,                                      weights='distance'))],         verbose=False);2020-04-01 12:18:43,478556;END!
PLE;EVAL_TO;2020-04-01 12:18:32,712014;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 SelectFwe(alpha=0.04,                           score_func=<function f_classi...                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None,                                        max_features=0.8500000000000001,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=18,                                        min_samples_split=20,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:18:51,103876;END!
PLE;EVAL;2020-04-01 12:18:14,417489;5.677520036697388;2.584638;(0.11627654177838974, -2);9d276164-b5fa-401b-bd03-d0d48d966795;GaussianNB(RobustScaler(data));2020-04-01 12:18:58,663343;END!
PLE;IND_MUT;8588ca1b-82ed-402f-887e-64e6be56a3b7;9d276164-b5fa-401b-bd03-d0d48d966795;mut_insert;2020-04-01 12:18:58,666060;END!
PLE;EVAL;2020-04-01 12:18:22,203825;0.37471890449523926;0.3392140000000001;(-inf, -1);1cb1b5b2-e384-4f37-a9b3-f1363dc471b9;LinearSVC(data, LinearSVC.C=1.0, LinearSVC.dual=True, LinearSVC.loss='hinge', LinearSVC.penalty='l1', LinearSVC.tol=0.1);2020-04-01 12:19:00,502802;END!
PLE;IND_MUT;b2dd0043-86f1-446c-9f20-760463decaa2;1cb1b5b2-e384-4f37-a9b3-f1363dc471b9;mut_replace_terminal;2020-04-01 12:19:00,504327;END!
PLE;EVAL;2020-04-01 12:18:11,578914;18.725415229797363;10.24589;(-inf, -3);cb7150a3-011f-484d-b84b-9e6fb327548e;ExtraTreesClassifier(SelectPercentile(RBFSampler(data, RBFSampler.gamma=0.1), SelectPercentile.percentile=66, SelectPercentile.score_func=f_regression), ExtraTreesClassifier.bootstrap=False, ExtraTreesClassifier.criterion='entropy', ExtraTreesClassifier.max_features=0.9500000000000001, min_samples_leaf=11, min_samples_split=4, ExtraTreesClassifier.n_estimators=100);2020-04-01 12:19:01,971562;END!
PLE;IND_MUT;51bd5aab-d505-4b5b-8d4b-438511770298;cc4b55f7-b095-4391-a071-69d852419d78;mut_insert;2020-04-01 12:19:01,972715;END!
PLE;EVAL;2020-04-01 12:18:25,022219;18.474511861801147;10.410708;(-inf, -2);c0afa4b8-1070-4985-837b-662d3a372a96;KNeighborsClassifier(SelectPercentile(data, SelectPercentile.percentile=91, SelectPercentile.score_func=f_regression), KNeighborsClassifier.n_neighbors=46, KNeighborsClassifier.p=2, KNeighborsClassifier.weights='distance');2020-04-01 12:19:03,637700;END!
PLE;EVAL_TO;2020-04-01 12:18:45,230777;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', MaxAbsScaler(copy=True)),                ('1',                 FeatureAgglomeratio...                                            max_depth=8,                                            max_features=0.7000000000000001,                                            max_leaf_nodes=None,                                            min_impurity_decrease=0.0,                                            min_impurity_split=None,                                            min_samples_leaf=14,                                            min_samples_split=5,                                            min_weight_fraction_leaf=0.0,                                            n_estimators=100,                                            n_iter_no_change=None,                                            presort='deprecated',                                            random_state=None, subsample=0.8,                                            tol=0.0001, validation_fraction=0.1,                                            verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:19:03,263244;END!
PLE;IND_MUT;2d0b7a8b-ed15-4108-b28b-3a0b3374a1b7;1cb1b5b2-e384-4f37-a9b3-f1363dc471b9;mut_replace_primitive;2020-04-01 12:19:03,639725;END!
PLE;EVAL;2020-04-01 12:18:32,711303;18.424948930740356;10.709969999999998;(-inf, -2);31a16082-0ce6-4946-96a3-aaa3f5021d27;RandomForestClassifier(SelectFwe(data, SelectFwe.alpha=0.04, SelectFwe.score_func=f_classif), RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.8500000000000001, RandomForestClassifier.min_samples_leaf=18, RandomForestClassifier.min_samples_split=20, RandomForestClassifier.n_estimators=100);2020-04-01 12:19:04,810584;END!
PLE;IND_MUT;f03ae9c2-bc34-4d91-b734-45065793eaeb;c0afa4b8-1070-4985-837b-662d3a372a96;mut_shrink;2020-04-01 12:19:04,811795;END!
PLE;EVAL;2020-04-01 12:18:54,440198;5.746496915817261;4.256974;(0.486049713747373, -3);d1943bd7-13b8-41a4-845e-3e6565ac7b38;DecisionTreeClassifier(FastICA(FeatureAgglomeration(data, FeatureAgglomeration.affinity='cosine', FeatureAgglomeration.linkage='complete'), FastICA.tol=0.75), DecisionTreeClassifier.criterion='gini', DecisionTreeClassifier.max_depth=2, min_samples_leaf=13, min_samples_split=7);2020-04-01 12:19:07,155941;END!
PLE;IND_MUT;ddbe2d41-70dd-414d-a4ce-72c8eb7c9662;d1943bd7-13b8-41a4-845e-3e6565ac7b38;mut_replace_terminal;2020-04-01 12:19:07,159731;END!
PLE;EVAL;2020-04-01 12:18:45,221970;18.050724983215332;13.256692;(-inf, -3);1511ae76-26cc-47df-b154-dc6a282edd47;GradientBoostingClassifier(FeatureAgglomeration(MaxAbsScaler(data), FeatureAgglomeration.affinity='manhattan', FeatureAgglomeration.linkage='average'), GradientBoostingClassifier.learning_rate=0.5, GradientBoostingClassifier.max_depth=8, GradientBoostingClassifier.max_features=0.7000000000000001, GradientBoostingClassifier.min_samples_leaf=14, GradientBoostingClassifier.min_samples_split=5, GradientBoostingClassifier.n_estimators=100, GradientBoostingClassifier.subsample=0.8);2020-04-01 12:19:08,432654;END!
PLE;IND_MUT;efcec753-a688-4dcd-a4bf-b7cc9b3fb331;d1943bd7-13b8-41a4-845e-3e6565ac7b38;mut_shrink;2020-04-01 12:19:08,434073;END!
PLE;EVAL;2020-04-01 12:19:04,626527;18.036201000213623;15.65608;(-inf, -3);787ad1e7-6129-42f9-b0fd-442eb768dc36;LogisticRegression(StandardScaler(MaxAbsScaler(data)), LogisticRegression.C=5.0, LogisticRegression.dual=False, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:19:23,543054;END!
PLE;EVAL_TO;2020-04-01 12:19:04,627337;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', MaxAbsScaler(copy=True)),                ('1', StandardScaler(copy=True, with_mean=True, with_std=True)),                ('0',                 LogisticRegression(C=5.0, class_weight=None, dual=False,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);2020-04-01 12:19:22,645588;END!
PLE;IND_MUT;031c6402-4f92-46c8-8941-cd9783baee38;1cb1b5b2-e384-4f37-a9b3-f1363dc471b9;mut_replace_terminal;2020-04-01 12:19:23,548111;END!
PLE;EVAL;2020-04-01 12:19:23,777291;18.612733840942383;14.983843999999998;(-inf, -2);3e92f8cb-1362-4f81-a070-130cf4454bd9;ExtraTreesClassifier(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), ExtraTreesClassifier.bootstrap=True, ExtraTreesClassifier.criterion='entropy', ExtraTreesClassifier.max_features=0.1, min_samples_leaf=18, min_samples_split=16, ExtraTreesClassifier.n_estimators=100);2020-04-01 12:19:43,172246;END!
PLE;EVAL_TO;2020-04-01 12:19:23,783372;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1',                 PolynomialFeatures(degree=2, include_bias=False,                                    in...                 ExtraTreesClassifier(bootstrap=True, ccp_alpha=0.0,                                      class_weight=None, criterion='entropy',                                      max_depth=None, max_features=0.1,                                      max_leaf_nodes=None, max_samples=None,                                      min_impurity_decrease=0.0,                                      min_impurity_split=None,                                      min_samples_leaf=18, min_samples_split=16,                                      min_weight_fraction_leaf=0.0,                                      n_estimators=100, n_jobs=None,                                      oob_score=False, random_state=None,                                      verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:19:42,374991;END!
PLE;IND_MUT;9d877b6f-a62d-44a1-9833-c72877c5c049;787ad1e7-6129-42f9-b0fd-442eb768dc36;mut_replace_primitive;2020-04-01 12:19:43,180995;END!
PLE;PE;search;AsyncEA;2020-04-01 12:20:12,528980;END!
PLE;PS;postprocess;EnsemblePostProcessing;2020-04-01 12:20:12,531000;END!
PLE;PE;postprocess;EnsemblePostProcessing;2020-04-01 12:20:13,061543;END!
PLE;INIT;scoring=accuracy,regularize_length=True,max_pipeline_length=None,random_state=None,max_total_time=360,max_eval_time=None,n_jobs=2,verbosity=20,keep_analysis_log=/Users/joa/notebooks/mlcourse/engineer/labs/covtype_ensemble.log,search_method=AsyncEA(),post_processing_method=EnsemblePostProcessing(ensemble_size=25,hillclimb_size=10000,max_models=200);2020-04-01 12:20:37,232549;END!
PLE;PS;preprocessing;default;2020-04-01 12:20:39,732750;END!
PLE;PE;preprocessing;default;2020-04-01 12:20:40,377257;END!
PLE;PS;search;AsyncEA;2020-04-01 12:20:40,379003;END!
PLE;EVAL;2020-04-01 12:20:41,083259;0.2385251522064209;0.289296;(-inf, -2);0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;MultinomialNB(Normalizer(data, Normalizer.norm='l1'), alpha=0.1, fit_prior=False);2020-04-01 12:21:09,727744;END!
PLE;EVAL_ERR;2020-04-01 12:20:41,086018;Pipeline(memory=None,         steps=[('3',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('2',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('1', Normalizer(copy=True, norm='l1')),                ('0',                 MultinomialNB(alpha=0.1, class_prior=None, fit_prior=False))],         verbose=False);<class 'ValueError'>;Negative values in data passed to MultinomialNB (input X);2020-04-01 12:20:41,322364;END!
PLE;EVAL_ERR;2020-04-01 12:20:42,672008;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PolynomialFeatures(degree=2, include_bias=False,                                    interaction_only=False, order='C')),                ('1',                 SelectFwe(alpha=0.039,                           score_func=<function f_regression at 0x11a6f0c80>)),                ('0',                 LinearSVC(C=0.0001, class_weight=None, dual=True,                           fit_intercept=True, intercept_scaling=1,                           loss='hinge', max_iter=1000, multi_class='ovr',                           penalty='l1', random_state=None, tol=1e-05,                           verbose=0))],         verbose=False);<class 'ValueError'>;Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True;2020-04-01 12:20:45,282977;END!
PLE;EVAL_ERR;2020-04-01 12:20:55,975030;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PCA(copy=True, iterated_power=2, n_components=None,...                     whiten=False)),                ('1',                 SelectFwe(alpha=0.043000000000000003,                           score_func=<function f_regression at 0x11a6f0c80>)),                ('0',                 LogisticRegression(C=5.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:20:56,487139;END!
PLE;EVAL;2020-04-01 12:20:42,669937;2.613301992416382;1.939626;(-inf, -3);453d0be1-c724-4fd6-b19f-0b5b59996ac3;LinearSVC(SelectFwe(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), SelectFwe.alpha=0.039, SelectFwe.score_func=f_regression), LinearSVC.C=0.0001, LinearSVC.dual=True, LinearSVC.loss='hinge', LinearSVC.penalty='l1', LinearSVC.tol=1e-05);2020-04-01 12:21:10,300966;END!
PLE;IND_MUT;918f63b7-3958-452d-b866-e20bfb0abd22;453d0be1-c724-4fd6-b19f-0b5b59996ac3;mut_replace_primitive;2020-04-01 12:21:10,303185;END!
PLE;EVAL;2020-04-01 12:20:41,696603;2.746335983276367;2.046924;(0.572360315964925, -3);52f5d19b-9c68-4a5f-8502-f0135f695cb0;BernoulliNB(FastICA(VarianceThreshold(data, VarianceThreshold.threshold=0.7000000000000001), FastICA.tol=0.75), alpha=10.0, fit_prior=True);2020-04-01 12:21:12,204984;END!
PLE;IND_CX;7061956d-f227-4f8e-b99b-fb6fc6287a4e;453d0be1-c724-4fd6-b19f-0b5b59996ac3;0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;2020-04-01 12:21:12,207742;END!
PLE;EVAL;2020-04-01 12:20:46,935062;8.355018138885498;6.63063;(0.538807159939126, -2);4e7992ec-431d-447a-8bd9-989ac0dee10e;GaussianNB(PCA(data, PCA.iterated_power=8, PCA.svd_solver='randomized'));2020-04-01 12:21:13,194537;END!
PLE;IND_MUT;eb0464b0-75ec-4975-bf3c-6ad03142edcb;453d0be1-c724-4fd6-b19f-0b5b59996ac3;mut_replace_terminal;2020-04-01 12:21:13,196007;END!
PLE;EVAL;2020-04-01 12:20:55,974218;0.5140132904052734;0.7862960000000001;(-inf, -3);3fdfe3a0-0919-41c3-8883-162b578cc9d1;LogisticRegression(SelectFwe(PCA(data, PCA.iterated_power=2, PCA.svd_solver='randomized'), SelectFwe.alpha=0.043000000000000003, SelectFwe.score_func=f_regression), LogisticRegression.C=5.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:21:14,200623;END!
PLE;IND_MUT;103041cc-562b-49c9-ab5c-8e0815133d9d;52f5d19b-9c68-4a5f-8502-f0135f695cb0;mut_replace_primitive;2020-04-01 12:21:14,202503;END!
PLE;EVAL;2020-04-01 12:20:58,434198;2.2429049015045166;2.2252199999999984;(0.10084064062613232, -2);55ac0190-7c13-46c3-855a-6b1c99564100;GaussianNB(StandardScaler(data));2020-04-01 12:21:15,377488;END!
PLE;IND_MUT;ef1da9cf-9f9e-40f2-b368-f28c45b00260;4e7992ec-431d-447a-8bd9-989ac0dee10e;mut_replace_terminal;2020-04-01 12:21:15,379981;END!
PLE;EVAL;2020-04-01 12:21:01,954433;18.765686750411987;23.715688;(0.5908761504456844, -1);ab5e3db1-a980-413c-8ced-75fd5318f4a5;LogisticRegression(data, LogisticRegression.C=0.0001, LogisticRegression.dual=False, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:21:21,859426;END!
PLE;IND_MUT;e8c8cd22-9912-4b78-ab90-57859c1dd8db;4e7992ec-431d-447a-8bd9-989ac0dee10e;mut_replace_terminal;2020-04-01 12:21:21,863051;END!
PLE;EVAL;2020-04-01 12:20:46,580163;36.093592166900635;39.675065999999994;(-inf, -1);1f1dab98-5efc-4e48-b5e9-f6b43c4fd16b;RandomForestClassifier(data, RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.2, RandomForestClassifier.min_samples_leaf=12, RandomForestClassifier.min_samples_split=16, RandomForestClassifier.n_estimators=100);2020-04-01 12:21:23,402674;END!
PLE;EVAL_TO;2020-04-01 12:20:46,581773;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None, max_features=0.2,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=12,                                        min_samples_split=16,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:21:22,661140;END!
PLE;IND_MUT;8aaab6e2-f5f3-4da4-90ff-8ab904b673eb;0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;mut_shrink;2020-04-01 12:21:23,404205;END!
PLE;EVAL;2020-04-01 12:21:23,293037;27.766370058059692;34.880848;(0.37926661352271906, -3);91261680-0ce3-440a-bd94-7abb923a4a82;KNeighborsClassifier(Nystroem(PolynomialFeatures(data, PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), Nystroem.gamma=0.30000000000000004, Nystroem.kernel='laplacian', Nystroem.n_components=7), KNeighborsClassifier.n_neighbors=24, KNeighborsClassifier.p=2, KNeighborsClassifier.weights='distance');2020-04-01 12:21:53,642973;END!
PLE;EVAL_ERR;2020-04-01 12:21:53,005276;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 LogisticRegression(C=0.1, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:21:53,235080;END!
PLE;IND_MUT;788d33a4-ca9c-43c2-823c-242eb973d423;ab5e3db1-a980-413c-8ced-75fd5318f4a5;mut_replace_terminal;2020-04-01 12:21:53,645964;END!
PLE;EVAL;2020-04-01 12:21:53,004466;0.23203802108764648;0.2722359999999924;(-inf, -1);39cac418-a29e-43d0-8044-a5117e58fd02;LogisticRegression(data, LogisticRegression.C=0.1, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:21:54,382179;END!
PLE;IND_MUT;814687ca-c355-4969-a043-8fdebadd15fa;0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;mut_replace_terminal;2020-04-01 12:21:54,383580;END!
PLE;EVAL;2020-04-01 12:21:53,936633;2.3292510509490967;2.8298419999999993;(0.42774838756431627, -3);34c9a6ac-c9d2-4ffe-bb27-8ca39282ea19;GaussianNB(FeatureAgglomeration(Normalizer(data, Normalizer.norm='max'), FeatureAgglomeration.affinity='precomputed', FeatureAgglomeration.linkage='average'));2020-04-01 12:21:57,091452;END!
PLE;IND_MUT;bec35e08-4bbe-4357-9ec8-48385399e279;453d0be1-c724-4fd6-b19f-0b5b59996ac3;mut_insert;2020-04-01 12:21:57,095058;END!
PLE;EVAL;2020-04-01 12:21:56,853470;0.2807917594909668;0.35569399999999973;(-inf, -3);7efae261-47f6-4779-afd5-2b6a14a3144b;MultinomialNB(Nystroem(Nystroem(data, Nystroem.gamma=0.25, Nystroem.kernel='poly', Nystroem.n_components=10), Nystroem.gamma=0.8500000000000001, Nystroem.kernel='linear', Nystroem.n_components=9), alpha=0.001, fit_prior=True);2020-04-01 12:21:58,073788;END!
PLE;EVAL_ERR;2020-04-01 12:21:56,854652;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 Nystroem(coef0=None, degree=None, gamma=0.25, kernel='poly',                          kernel_params=None, n_components=10,                          random_state=None)),                ('1',                 Nystroem(coef0=None, degree=None, gamma=0.8500000000000001,                          kernel='linear', kernel_params=None, n_components=9,                          random_state=None)),                ('0',                 MultinomialNB(alpha=0.001, class_prior=None, fit_prior=True))],         verbose=False);<class 'ValueError'>;Negative values in data passed to MultinomialNB (input X);2020-04-01 12:21:57,133802;END!
PLE;IND_MUT;fa6a63fa-d561-4d8a-b15c-581b7682ebfb;453d0be1-c724-4fd6-b19f-0b5b59996ac3;mut_replace_primitive;2020-04-01 12:21:58,075884;END!
PLE;EVAL;2020-04-01 12:21:21,770523;36.79700303077698;47.49396;(-inf, -3);a4e3dbe6-c20f-4e72-bf0c-0874f23f7a3b;RandomForestClassifier(SelectFwe(PCA(data, PCA.iterated_power=4, PCA.svd_solver='randomized'), SelectFwe.alpha=0.012, SelectFwe.score_func=f_classif), RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.9500000000000001, RandomForestClassifier.min_samples_leaf=19, RandomForestClassifier.min_samples_split=19, RandomForestClassifier.n_estimators=100);2020-04-01 12:21:59,404948;END!
PLE;EVAL_TO;2020-04-01 12:21:21,774197;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 PCA(copy=True, iterated_power=4, n_components=None,...                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None,                                        max_features=0.9500000000000001,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=19,                                        min_samples_split=19,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:21:58,560519;END!
PLE;IND_MUT;12faa1b8-d691-44b4-bacf-1bb86571a682;0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;mut_replace_primitive;2020-04-01 12:21:59,406927;END!
PLE;EVAL;2020-04-01 12:21:57,944369;1.1263339519500732;1.3953520000000026;(0.46814986593231395, -2);4c9cbfab-eed9-448b-b25f-3148374f1456;DecisionTreeClassifier(Nystroem(data, Nystroem.gamma=0.35000000000000003, Nystroem.kernel='laplacian', Nystroem.n_components=2), DecisionTreeClassifier.criterion='entropy', DecisionTreeClassifier.max_depth=4, min_samples_leaf=13, min_samples_split=9);2020-04-01 12:22:01,395677;END!
PLE;IND_MUT;297568d7-c6c9-46c9-9e92-460b66188fdc;0fcdbe61-caf9-4894-b72f-a0a57a9aaa39;mut_replace_primitive;2020-04-01 12:22:01,397715;END!
PLE;EVAL;2020-04-01 12:22:01,126355;36.082524061203;35.386951999999994;(-inf, -1);24328558-defb-4728-9bfc-0d43a0b7feed;RandomForestClassifier(data, RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.8500000000000001, RandomForestClassifier.min_samples_leaf=11, RandomForestClassifier.min_samples_split=8, RandomForestClassifier.n_estimators=100);2020-04-01 12:22:38,251302;END!
PLE;EVAL_TO;2020-04-01 12:22:01,129727;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None,                                        max_features=0.8500000000000001,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=11,                                        min_samples_split=8,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:22:37,202589;END!
PLE;IND_MUT;52ffbf52-13ff-4242-92f9-c457abae65a5;4e7992ec-431d-447a-8bd9-989ac0dee10e;mut_replace_primitive;2020-04-01 12:22:38,254322;END!
PLE;EVAL;2020-04-01 12:22:38,460987;0.321134090423584;0.31452999999999065;(-inf, -3);015df267-7e8c-40fe-8014-039e1e0b9605;LogisticRegression(Nystroem(VarianceThreshold(data, VarianceThreshold.threshold=0.55), Nystroem.gamma=0.5, Nystroem.kernel='poly', Nystroem.n_components=5), LogisticRegression.C=20.0, LogisticRegression.dual=True, LogisticRegression.penalty='l2', LogisticRegression.solver='lbfgs');2020-04-01 12:22:40,304137;END!
PLE;EVAL_ERR;2020-04-01 12:22:38,463498;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', VarianceThreshold(threshold=0.55)),                ('1',                 Nystroem(...ne, degree=None, gamma=0.5, kernel='poly',                          kernel_params=None, n_components=5,                          random_state=None)),                ('0',                 LogisticRegression(C=20.0, class_weight=None, dual=True,                                    fit_intercept=True, intercept_scaling=1,                                    l1_ratio=None, max_iter=100,                                    multi_class='auto', n_jobs=None,                                    penalty='l2', random_state=None,                                    solver='lbfgs', tol=0.0001, verbose=0,                                    warm_start=False))],         verbose=False);<class 'ValueError'>;Solver lbfgs supports only dual=False, got dual=True;2020-04-01 12:22:38,783610;END!
PLE;IND_MUT;b8e2e1df-66bc-49d9-819f-47737aed2ae6;52f5d19b-9c68-4a5f-8502-f0135f695cb0;mut_shrink;2020-04-01 12:22:40,305881;END!
PLE;EVAL;2020-04-01 12:21:59,496492;61.01277303695679;63.265748;(-inf, -3);3884155c-9960-4e26-a6bc-0d894e352ab2;LinearSVC(SelectPercentile(MinMaxScaler(data), SelectPercentile.percentile=90, SelectPercentile.score_func=f_regression), LinearSVC.C=5.0, LinearSVC.dual=False, LinearSVC.loss='squared_hinge', LinearSVC.penalty='l1', LinearSVC.tol=0.0001);2020-04-01 12:23:01,211277;END!
PLE;EVAL_TO;2020-04-01 12:21:59,498446;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2', MinMaxScaler(copy=True, feature_range=(0, 1))),                ('1',                 SelectPercentile(percentile=90,                                  score_func=<function f_regression at 0x11a6f0c80>)),                ('0',                 LinearSVC(C=5.0, class_weight=None, dual=False,                           fit_intercept=True, intercept_scaling=1,                           loss='squared_hinge', max_iter=1000,                           multi_class='ovr', penalty='l1', random_state=None,                           tol=0.0001, verbose=0))],         verbose=False);2020-04-01 12:23:00,503510;END!
PLE;IND_MUT;35de5c1c-199e-4e91-9e7a-aebba8fa2850;ab5e3db1-a980-413c-8ced-75fd5318f4a5;mut_replace_primitive;2020-04-01 12:23:01,214264;END!
PLE;EVAL;2020-04-01 12:23:01,207431;1.5964908599853516;1.6827480000000037;(0.4906877309949996, -1);cb4b3913-eddd-423a-ab07-235a30db2198;BernoulliNB(data, alpha=100.0, fit_prior=True);2020-04-01 12:23:04,877253;END!
PLE;IND_MUT;f5394568-01fa-464f-87e5-0caff3ac1ca3;55ac0190-7c13-46c3-855a-6b1c99564100;mut_insert;2020-04-01 12:23:04,886219;END!
PLE;EVAL;2020-04-01 12:22:39,849635;36.4648540019989;41.61241199999999;(-inf, -3);161cf555-97ff-4321-b1c4-be35b4efe1fb;ExtraTreesClassifier(FastICA(SelectPercentile(data, SelectPercentile.percentile=62, SelectPercentile.score_func=f_regression), FastICA.tol=0.2), ExtraTreesClassifier.bootstrap=False, ExtraTreesClassifier.criterion='entropy', ExtraTreesClassifier.max_features=0.9500000000000001, min_samples_leaf=6, min_samples_split=20, ExtraTreesClassifier.n_estimators=100);2020-04-01 12:23:17,455313;END!
PLE;EVAL_TO;2020-04-01 12:22:39,852988;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 SelectPercentile(percentile=62,                                  score_func=<functi...                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,                                      class_weight=None, criterion='entropy',                                      max_depth=None,                                      max_features=0.9500000000000001,                                      max_leaf_nodes=None, max_samples=None,                                      min_impurity_decrease=0.0,                                      min_impurity_split=None,                                      min_samples_leaf=6, min_samples_split=20,                                      min_weight_fraction_leaf=0.0,                                      n_estimators=100, n_jobs=None,                                      oob_score=False, random_state=None,                                      verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:23:16,305016;END!
PLE;IND_MUT;2cc308eb-0b95-471b-9b74-494a9a1a85a8;cb4b3913-eddd-423a-ab07-235a30db2198;mut_replace_terminal;2020-04-01 12:23:17,458417;END!
PLE;EVAL;2020-04-01 12:23:04,655124;36.03697419166565;43.598408000000006;(-inf, -1);a5ea0741-7c43-495a-ad78-475780418202;RandomForestClassifier(data, RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='gini', RandomForestClassifier.max_features=0.7500000000000001, RandomForestClassifier.min_samples_leaf=5, RandomForestClassifier.min_samples_split=12, RandomForestClassifier.n_estimators=100);2020-04-01 12:23:41,294065;END!
PLE;EVAL_TO;2020-04-01 12:23:04,655555;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='gini',                                        max_depth=None,                                        max_features=0.7500000000000001,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=5,                                        min_samples_split=12,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:23:40,682122;END!
PLE;IND_MUT;17cdee4d-30ee-4579-8f47-3214e2a9ee39;a5ea0741-7c43-495a-ad78-475780418202;mut_replace_terminal;2020-04-01 12:23:41,297089;END!
PLE;EVAL;2020-04-01 12:23:17,324844;36.43283987045288;47.003761999999995;(-inf, -3);01f1c69e-f101-4a7a-b2db-173aacd5a0db;GradientBoostingClassifier(PolynomialFeatures(SelectFwe(data, SelectFwe.alpha=0.046, SelectFwe.score_func=f_classif), PolynomialFeatures.degree=2, PolynomialFeatures.include_bias=False, PolynomialFeatures.interaction_only=False), GradientBoostingClassifier.learning_rate=0.5, GradientBoostingClassifier.max_depth=6, GradientBoostingClassifier.max_features=0.05, GradientBoostingClassifier.min_samples_leaf=19, GradientBoostingClassifier.min_samples_split=19, GradientBoostingClassifier.n_estimators=100, GradientBoostingClassifier.subsample=0.5);2020-04-01 12:23:54,558867;END!
PLE;EVAL_TO;2020-04-01 12:23:17,327289;Pipeline(memory=None,         steps=[('4',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('3',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('2',                 SelectFwe(alpha=0.046,                           score_func=<function f_class...                                            learning_rate=0.5, loss='deviance',                                            max_depth=6, max_features=0.05,                                            max_leaf_nodes=None,                                            min_impurity_decrease=0.0,                                            min_impurity_split=None,                                            min_samples_leaf=19,                                            min_samples_split=19,                                            min_weight_fraction_leaf=0.0,                                            n_estimators=100,                                            n_iter_no_change=None,                                            presort='deprecated',                                            random_state=None, subsample=0.5,                                            tol=0.0001, validation_fraction=0.1,                                            verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:23:53,749756;END!
PLE;IND_CX;30ab156f-f4b2-49bd-82dd-71b0ce08e9ef;52f5d19b-9c68-4a5f-8502-f0135f695cb0;cb4b3913-eddd-423a-ab07-235a30db2198;2020-04-01 12:23:54,563127;END!
PLE;EVAL;2020-04-01 12:23:41,378603;36.03960394859314;43.72632199999998;(-inf, -1);b923aa9a-e132-4f66-85d1-56b85f4d7cdd;RandomForestClassifier(data, RandomForestClassifier.bootstrap=True, RandomForestClassifier.criterion='entropy', RandomForestClassifier.max_features=0.3, RandomForestClassifier.min_samples_leaf=14, RandomForestClassifier.min_samples_split=19, RandomForestClassifier.n_estimators=100);2020-04-01 12:24:18,898141;END!
PLE;EVAL_TO;2020-04-01 12:23:41,379187;Pipeline(memory=None,         steps=[('2',                 TargetEncoder(cols=[], drop_invariant=False,                               handle_missing='value', handle_unknown='value',                               min_samples_leaf=1, return_df=True,                               smoothing=1.0, verbose=0)),                ('1',                 SimpleImputer(add_indicator=False, copy=True, fill_value=None,                               missing_values=nan, strategy='median',                               verbose=0)),                ('0',                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,                                        class_weight=None, criterion='entropy',                                        max_depth=None, max_features=0.3,                                        max_leaf_nodes=None, max_samples=None,                                        min_impurity_decrease=0.0,                                        min_impurity_split=None,                                        min_samples_leaf=14,                                        min_samples_split=19,                                        min_weight_fraction_leaf=0.0,                                        n_estimators=100, n_jobs=None,                                        oob_score=False, random_state=None,                                        verbose=0, warm_start=False))],         verbose=False);2020-04-01 12:24:17,411178;END!
PLE;IND_MUT;7c837e3a-8d6e-48db-a1ce-ac4d84a30a61;3fdfe3a0-0919-41c3-8883-162b578cc9d1;mut_insert;2020-04-01 12:24:18,901878;END!
PLE;EVAL;2020-04-01 12:24:19,090181;3.409528970718384;2.5792179999999973;(0.659540546416407, -1);01cf335f-27c0-4ad3-92d4-6e7e91ee06c0;DecisionTreeClassifier(data, DecisionTreeClassifier.criterion='entropy', DecisionTreeClassifier.max_depth=5, min_samples_leaf=1, min_samples_split=5);2020-04-01 12:24:24,299515;END!
PLE;IND_MUT;5d1567ea-140a-4ae6-959c-1085bf31b6d3;01cf335f-27c0-4ad3-92d4-6e7e91ee06c0;mut_insert;2020-04-01 12:24:24,301616;END!
PLE;PE;search;AsyncEA;2020-04-01 12:24:51,423344;END!
PLE;PS;postprocess;EnsemblePostProcessing;2020-04-01 12:24:51,432190;END!
PLE;PE;postprocess;EnsemblePostProcessing;2020-04-01 12:24:52,710961;END!
